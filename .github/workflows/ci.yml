name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-docker:
    name: Docker Tests
    runs-on: ubuntu-latest

    # Run a local registry to push to
    services:
      registry:
        image: registry:2
        ports:
          - 5001:5000

    env:
      TEST_TAG: localhost:5001/actions/bruno-run-action:latest
      RUN_OUTPUT: run-output.log

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Docker BuildX
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build the Container
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.TEST_TAG }}

      # prettier-ignore
      - name: Run the Container
        id: run
        run: docker run --env-file .github/workflows/ci.env --rm ${{ env.TEST_TAG }} > ${{ env.RUN_OUTPUT }}

      # prettier-ignore
      - name: Assert output
        id: assert
        run: |
          cat ${{ env.RUN_OUTPUT }}
          grep -q 'run users/get-user.bru' ${{ env.RUN_OUTPUT }}          || (echo '::error::incorrect collection path'           && exit 1)
          grep -q '\-r' ${{ env.RUN_OUTPUT }}                             || (echo '::error::-r was not supplied'                 && exit 1)
          grep -q '\-\-ignore\-truststore' ${{ env.RUN_OUTPUT }}          || (echo '::error::--ignore-truststore was not applied' && exit 1)
          grep -q '\-\-env cicd' ${{ env.RUN_OUTPUT }}                    || (echo '::error::incorrect --env supplied'            && exit 1)
          grep -q '\-\-env\-var apikey=myPassword' ${{ env.RUN_OUTPUT }}  || (echo '::error::incorrect --env-var for apikey'      && exit 1)
          grep -q '\-\-env\-var id=myId' ${{ env.RUN_OUTPUT }}            || (echo '::error::incorrect --env-var for id'          && exit 1)
          grep -q '\-\-output /usr/src/output.html' ${{ env.RUN_OUTPUT }} || (echo '::error::incorrect --output path'             && exit 1)
          grep -q '\-\-format html' ${{ env.RUN_OUTPUT }}                 || (echo '::error::incorrect --format'                  && exit 1)
          grep -q '\-\-cacert customcert.pem' ${{ env.RUN_OUTPUT }}       || (echo '::error::incorrect --ca-cert path'            && exit 1)
          grep -q '\-\-insecure' ${{ env.RUN_OUTPUT }}                    || (echo '::error::--insecure was not applied'          && exit 1)
          grep -q '\-\-sandbox safe' ${{ env.RUN_OUTPUT }}                || (echo '::error::--sandbox was not supplied'          && exit 1)
          grep -q '\-\-tests\-only' ${{ env.RUN_OUTPUT }}                 || (echo '::error::--tests-only was not supplied'       && exit 1)
          grep -q '\-\-csv\-file\-path' ${{ env.RUN_OUTPUT }}             || (echo '::error::--csv-file-path was not supplied'    && exit 1)
          grep -q '\-\-bail' ${{ env.RUN_OUTPUT }}                        || (echo '::error::--bail was not supplied'             && exit 1)

  bru-run-successfully:
    name: Action Successful Run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: bru-run
        uses: ./
        with:
          path: .github/bruno-collection
          env: cicd
          env-vars: |-
            secretKey='${{ secrets.CI_TEST_SECRET_KEY }}'
            secretMessage='${{ secrets.CI_TEST_SECRET_MESSAGE }}'
          output: bru-run-output.json
          output-format: json
          insecure: true
          tests-only: false
          bail: false

      - name: Succeed if run was successful
        if: ${{ steps.bru-run.outputs.success == 'true' }}
        run: exit 0

      - name: Fail if run was not successful
        if: ${{ steps.bru-run.outputs.success == 'false' }}
        run: exit 1

  bru-run-failure:
    name: Action Failure Run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: bru-run
        continue-on-error: true
        uses: ./
        with:
          path: .github/bruno-collection
          tests-only: false
          bail: true

      - name: Succeed if run was not successful
        if: ${{ steps.bru-run.outputs.success == 'false' }}
        run: exit 0

      - name: Fail if run was successful
        if: ${{ steps.bru-run.outputs.success == 'true' }}
        run: exit 1
